.. _gettingstarted:

Getting Started
===============================

In this section we will study the example ``examples/user_providers/deploy_user_provider.py``.

In MAD a deployment process is described under the form of an *assembly* of *components*. A component represents a software part to deploy. An assembly of components represents how components are connected through their dependencies.

The studied examples is composed of three different files:

- ``provider.py`` the provider component
- ``user.py`` the user component
- ``deploy_user_provider`` the assembly of component de deploy and its automatic deployment

First, the description of a component deployment will be explained. Second, the description of an assembly will be detailed.
  
Component
------------

The deployment of a component is described as a kind of petri net structure. The deployement of a component is composed of:

- a set of **places** representing the different states of the deployment of the component,
- a set of **transitions** representing the different actions to perform to move from one place to another,
- a set of **dependencies** representing the different dependencies provided or required by external components and bound to internal places or transitions.

Lets focus on the component description ``provider.py``:

.. code-block:: python

  from mad import *
  from transitions import *

  class Provider(Component):

    places = [
        'waiting',
        'initiated',
        'configured',
        'started'
    ]

    transitions = {
        'init': (Init(), 'waiting', 'initiated'),
        'config': (Config(), 'initiated', 'configured'),
        'start': (Start(), 'configured', 'started')
    }

    dependencies = {
        'ip': (DepType.DATA_PROVIDE, ['configured']),
        'service': (DepType.PROVIDE, ['started'])
    }

One can note in this example that a component is a new ``class`` that inherits the already existing ``Component`` class of MAD. For this reason, it is needed to import ``mad`` objects.

Three data structures must be defined in the new component class:

- ``places`` which is a simple list of strings. Each string representing the name of a given place.
- ``transitions`` which is a dictionary representing the set of transitions.
- ``dependencies`` which is a dictionary representing the set of dependencies of the component and their bindings to internal places and transitions.

Places
*********

The ``Provider`` component contains four places, namely 'waiting', 'initiated', 'configured' and 'started'.

Transitions
*************

The ``Provider`` component contains three transitions defined within a dictionary. The key of the dictionary is a string representing the name of the transition. Thus, ``Provider`` transitions are 'init', 'config', and 'start'. One can note that in this example transitions names are verbs. These names have been chosen to represent the fact that a transition is an action to perform.

Each key in the dictionary is associated to a triplet ``(action, source, destination)`` where:

- *action* is an object
- *source* is the name of the source place of the transition
- *destination* is the name of the destination place of the transition

For example, the ``'init'`` transition of ``Provider`` action is the instanciation of the class ``Init``, the source place is ``'waiting'``, and the destination place is ``'initiated'``. In other words, ``'init'`` is applied when moving from ``'waiting'`` to ``'initiated'``, by performing the action associated to the class ``Init``.

The ``Init`` class can be found in the file ``transitions.py``. It must be defined by the component designer.

.. code-block:: python

  class Init(object):
    def run(self):
        time.sleep(10)


A transition action is simply a class definition in which a function ``run`` must be defined. Inside this ``run`` function is implemented the action to perform within the transition. In our example (see ``transitions.py``) all ``run`` functions contains a ``sleep`` system call to emulate that the action takes sometime to run.


Dependencies
*************

Dependencies of a component are defined as a dictionary. Each key of dictionary elements represents the name of a given dependency. For example, ``Provider`` component has two dependencies ``'ip'`` and ``'service'``.

Each key is associated to a pair ``(type, list_bindings)`` where:

- *type* is the type of dependency
- *list_bindings* is a list of transitions or places to which the dependency is bound

Four types of dependencies are available in MAD:

- ``DepType.USE`` represents a *use* dependency, meaning that the component needs to use an external service provided by another component during its deployment process.
- ``DepType.PROVIDE`` represents a *provide* dependency, meaning that the component provides to external components some services during its deployment process.
- ``DepType.DATA_USE`` represents a *data-use* dependency, meaning that the component needs to use an external data provided by another component during its deployment process.
- ``DepType.DATA_PROVIDE`` represents a *data-provide* dependency, meaning that the component provides to external components a data during its deployment process.

The only difference between a service and a data is that once delivered a data is always available while a service could be disabled.

Each dependency is bound to a list of places or transitions. ``DepType.USE`` and ``DepType.DATA_USE`` can be bound to transitions only. Actually, an action of a transition may need a service or a data provided by external components. On the opposite, ``DepType.PROVIDE`` and ``DepType.DATA_PROVIDE`` can be bound to places only. When reaching a place a component is able to provide a data or a service to external components.

For example, ``Provider`` contains two dependencies:

- ``'ip'`` is a ``DepType.DATA_PROVIDE`` dependency bound (*i.e.* used) to the transition ``'configured'``
- ``'service'`` is a ``DepType.PROVIDE`` dependency bound (*i.e.* used) to the transition ``'started'``


  

User component
******************


Assembly of components
------------------------
